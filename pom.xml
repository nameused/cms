<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">    <modelVersion>4.0.0</modelVersion>    <parent>        <groupId>org.springframework.boot</groupId>        <artifactId>spring-boot-starter-parent</artifactId>        <version>2.2.2.RELEASE</version>        <relativePath/> <!-- lookup parent from repository -->    </parent>    <groupId>com.github</groupId>    <artifactId>cms</artifactId>    <version>0.1</version>    <name>cms</name>    <description>Demo project for Spring Boot</description>    <repositories>        <repository>            <id>maven-releases</id>            <!-- /用户名/仓库名/分支名/-->            <url>http://111.229.138.120:8081/repository/maven-releases</url>            <snapshots>                <enabled>true</enabled>                <updatePolicy>always</updatePolicy>            </snapshots>        </repository>    </repositories>    <properties>        <java.version>1.8</java.version>        <!--<slf4j.version>1.7.25</slf4j.version>-->        <docker.image.prefix>zmydocker</docker.image.prefix>        <github.global.server>github</github.global.server>    </properties>    <dependencies>        <!-- 导入自定义的加密工具包-->        <dependency>            <groupId>org.github</groupId>            <artifactId>crypto</artifactId>            <exclusions>                <exclusion>                    <groupId>org.slf4j</groupId>                    <artifactId>slf4j-api</artifactId>                </exclusion>                <exclusion>                    <groupId>org.slf4j</groupId>                    <artifactId>slf4j-log4j12</artifactId>                </exclusion>            </exclusions>            <version>0.1</version>        </dependency>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-test</artifactId>            <scope>test</scope>            <exclusions>                <exclusion>                    <groupId>org.junit.vintage</groupId>                    <artifactId>junit-vintage-engine</artifactId>                </exclusion>            </exclusions>        </dependency>        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-web</artifactId>        </dependency>        <!--spring data jpa-->        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-starter-data-jpa</artifactId>        </dependency>        <!-- MySQL的java驱动 -->        <dependency>            <groupId>mysql</groupId>            <artifactId>mysql-connector-java</artifactId>        </dependency>        <!--Swagger-UI API文档生产工具-->        <dependency>            <groupId>io.springfox</groupId>            <artifactId>springfox-swagger2</artifactId>            <version>2.6.1</version>        </dependency>        <dependency>            <groupId>io.springfox</groupId>            <artifactId>springfox-swagger-ui</artifactId>            <version>2.6.1</version>        </dependency>        <!--日志配置-->        <!--<dependency>-->            <!--<groupId>org.slf4j</groupId>-->            <!--<artifactId>slf4j-api</artifactId>-->            <!--<version>${slf4j.version}</version>-->        <!--</dependency>-->        <!--<dependency>-->            <!--<groupId>org.slf4j</groupId>-->            <!--<artifactId>slf4j-log4j12</artifactId>-->            <!--<version>${slf4j.version}</version>-->        <!--</dependency>-->        <!--分页插件-->        <dependency>            <groupId>com.github.pagehelper</groupId>            <artifactId>pagehelper-spring-boot-starter</artifactId>            <version>1.2.3</version>        </dependency>        <!--热部署插件-->        <dependency>            <groupId>org.springframework.boot</groupId>            <artifactId>spring-boot-devtools</artifactId>            <optional>true</optional>        </dependency>    </dependencies>    <build>        <plugins>            <!-- springboot 打包插件，会将类加载器及相关lib包打入到jar包中，打包doker镜像时，必须通过该插件打包-->            <plugin>                <groupId>org.springframework.boot</groupId>                <artifactId>spring-boot-maven-plugin</artifactId>            </plugin>            <!-- maven打包插件，不会将lib包打入到jar中，将自定义jar包上传至github时，必须通过该插件打包，不能使用spingboot提供的打包插件-->            <plugin>                <groupId>org.apache.maven.plugins</groupId>                <artifactId>maven-compiler-plugin</artifactId>                <version>3.6.1</version>                <configuration>                    <source>1.8</source>                    <target>1.8</target>                </configuration>            </plugin>            <!-- 打包为docker镜像的插件-->            <plugin>                <groupId>com.spotify</groupId>                <artifactId>docker-maven-plugin</artifactId>                <version>1.0.0</version>                <configuration>                    <imageName>${docker.image.prefix}/${project.artifactId}</imageName>                    <!--指定docker镜像的版本号-->                    <imageTags>                        <!--使用maven项目的版本号-->                        <imageTag>${project.version}</imageTag>                    </imageTags>                    <dockerDirectory>src/main/docker</dockerDirectory>                    <resources>                        <resource>                            <targetPath>/</targetPath>                            <directory>${project.build.directory}</directory>                            <include>${project.build.finalName}.jar</include>                        </resource>                    </resources>                    <serverId>docker-hub</serverId>                    <registryUrl>https://index.docker.io/v1/</registryUrl>                </configuration>            </plugin>            <!--将jar包发布到github的maven仓库插件-->            <plugin>                <artifactId>maven-deploy-plugin</artifactId>                <version>2.8.1</version>                <configuration>                    <altDeploymentRepository>internal.repo::default::file://${project.build.directory}/maven-repo                    </altDeploymentRepository>                </configuration>            </plugin>            <!--<plugin>-->            <!--<groupId>com.github.github</groupId>-->            <!--<artifactId>site-maven-plugin</artifactId>-->            <!--<version>0.12</version>-->            <!--<configuration>-->            <!--<message>Maven artifacts for ${project.version}</message>-->            <!--<noJekyll>true</noJekyll>-->            <!--<outputDirectory>${project.build.directory}/maven-repo</outputDirectory>&lt;!&ndash;本地jar地址&ndash;&gt;-->            <!--<branch>refs/heads/develop</branch>&lt;!&ndash;分支的名称&ndash;&gt;-->            <!--<merge>true</merge>-->            <!--<includes>-->            <!--<include>**/*</include>-->            <!--</includes>-->            <!--<repositoryName>maven-repo</repositoryName>&lt;!&ndash;对应github上创建的仓库名称 name&ndash;&gt;-->            <!--<repositoryOwner>nameused</repositoryOwner>&lt;!&ndash;github 仓库所有者即登录用户名&ndash;&gt;-->            <!--</configuration>-->            <!--<executions>-->            <!--<execution>-->            <!--<goals>-->            <!--<goal>site</goal>-->            <!--</goals>-->            <!--<phase>deploy</phase>-->            <!--</execution>-->            <!--</executions>-->            <!--</plugin>-->            <!-- maven-surefire-plugin -->            <plugin>                <inherited>true</inherited>                <groupId>org.apache.maven.plugins</groupId>                <artifactId>maven-surefire-plugin</artifactId>                <version>2.21.0</version>                <configuration>                    <!-- 跳过测试 -->                    <skipTests>true</skipTests>                </configuration>            </plugin>        </plugins>    </build></project>